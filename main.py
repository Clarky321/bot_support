import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GIGACHAT_CREDENTIALS = os.getenv("GIGACHAT_CREDENTIALS")

if not TELEGRAM_TOKEN or not GIGACHAT_CREDENTIALS:
    raise RuntimeError("–£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ GIGACHAT_CREDENTIALS –≤ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
giga = GigaChat(
    credentials=GIGACHAT_CREDENTIALS,
    verify_ssl_certs=False,  # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
)

# System prompt
SYSTEM_PROMPT = (
    "–í—ã ‚Äî –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
    "–í–∞—à–∞ –∑–∞–¥–∞—á–∞: –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–µ—à–∞—Ç—å –∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, "
    "–¥–∞–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã, –∞ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî "
    "–ø—Ä–æ—Å–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è."
)

# Telegram setup
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–π
sessions: dict[int, dict] = {}

def init_session(user_id: int):
    if user_id not in sessions:
        sessions[user_id] = {
            "messages": [SystemMessage(content=SYSTEM_PROMPT)],
            "history": [
                {"role": "system", "text": SYSTEM_PROMPT, "ts": datetime.utcnow().isoformat()}
            ],
        }

def action_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ—à–µ–Ω–æ ‚úÖ", callback_data="solved"),
            InlineKeyboardButton(text="–ù–µ —Ä–µ—à–µ–Ω–æ ‚ùå", callback_data="unsolved"),
        ]
    ])

def get_recent_messages(messages, max_pairs=8):
    """–û—Å—Ç–∞–≤–ª—è–µ–º system + –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_pairs –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not messages:
        return [SystemMessage(content=SYSTEM_PROMPT)]
    system = messages[0]
    others = messages[1:]
    return [system] + others[-(max_pairs * 2):]

async def call_gigachat(messages):
    try:
        payload = get_recent_messages(messages)
        res = await asyncio.to_thread(giga.invoke, payload)
        return getattr(res, "content", str(res))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}"

def save_dialog_to_file_and_clear(user_id: int, status: str) -> str:
    sess = sessions.get(user_id)
    if not sess or not sess.get("history"):
        return ""
    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    filename = f"dialog_{user_id}_{status}_{ts}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write(f"User ID: {user_id}\nSaved at: {datetime.utcnow().isoformat()} UTC\nStatus: {status}\n\n")
        for item in sess["history"]:
            f.write(f"{item['ts']}  {item['role'].upper()}: {item['text']}\n\n")
    sessions.pop(user_id, None)
    return filename

# -------------------- Handlers --------------------

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    init_session(message.from_user.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n"
        "–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å: ¬´–†–µ—à–µ–Ω–æ¬ª ‚úÖ –∏–ª–∏ ¬´–ù–µ —Ä–µ—à–µ–Ω–æ¬ª ‚ùå."
    )

@dp.message()
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text or ""
    if not text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
        return

    init_session(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    human_msg = HumanMessage(content=text)
    sessions[user_id]["messages"].append(human_msg)
    sessions[user_id]["history"].append({
        "role": "user", "text": text, "ts": datetime.utcnow().isoformat()
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat
    await message.chat.do("typing")
    bot_reply = await call_gigachat(sessions[user_id]["messages"])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    sessions[user_id]["messages"].append(SystemMessage(content=bot_reply))
    sessions[user_id]["history"].append({
        "role": "bot", "text": bot_reply, "ts": datetime.utcnow().isoformat()
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(bot_reply, reply_markup=action_keyboard())

@dp.callback_query(F.data == "solved")
async def cb_solved(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    filename = save_dialog_to_file_and_clear(user_id, "solved")
    if filename:
        await callback.message.answer(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{filename}`", parse_mode="Markdown")
    else:
        await callback.message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await callback.answer()

@dp.callback_query(F.data == "unsolved")
async def cb_unsolved(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    filename = save_dialog_to_file_and_clear(user_id, "unsolved")
    if filename:
        await callback.message.answer(
            f"‚ùå –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{filename}`. –û—Ç–ø—Ä–∞–≤–∏–º –≤ ServiceDesk.",
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer("‚ùå –î–∏–∞–ª–æ–≥ –ø—É—Å—Ç –∏–ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await callback.answer()

# -------------------- –ó–∞–ø—É—Å–∫ --------------------

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
